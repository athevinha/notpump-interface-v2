{"version":3,"file":"static/js/4635.ddf57c40.chunk.js","mappings":"iUAmBe,SAASA,IACtB,IAAQC,GAAiBC,EAAAA,EAAAA,MAAjBD,aAEFE,GAAWC,EAAAA,EAAAA,MAETC,GAASC,EAAAA,EAAAA,MAATD,KAEFE,GAAiBC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OACvCA,EAAMC,QAAQC,SAASC,MAAK,SAACF,GAAO,OAAKG,EAAAA,EAAAA,GAAUH,EAAQL,QAAUA,CAAI,GAAC,IAO5E,OAJAS,EAAAA,EAAAA,YAAU,WACRX,GAASY,EAAAA,EAAAA,MACX,GAAG,CAACZ,KAGF,iCACE,SAAC,KAAM,WACL,qEAGF,UAAC,IAAS,CAACa,UAAUf,GAAuB,KAAK,WAC/C,SAAC,IAAiB,CAChBgB,QAAQ,eACRC,MAAO,CACL,CAAEb,KAAM,YAAac,KAAMC,EAAAA,GAAAA,MAC3B,CACEf,KAAM,aACNc,KAAMC,EAAAA,GAAAA,MAAAA,MAER,CAAEf,KAAoB,OAAdE,QAAc,IAAdA,OAAc,EAAdA,EAAgBF,UAI5B,SAAC,IAAkB,CAACgB,QAAM,EAACd,eAAgBA,SAInD,C,iFCrDM,SAAUe,EAAQC,EAAeC,GACrC,YADqC,IAAAA,IAAAA,EAAAA,CAAAA,IAC9BC,EAAAA,EAAAA,GAAOF,GAAO,SACnBG,UAAW,KACRF,GAEP,C,wDC4CM,SAAUG,EAAUC,GACxB,OAAOA,EAAIC,aACb,CC7CA,IAAMC,EAAuB,CAAC,qBAAsB,wBAG9CC,EAAuB,eAKvB,SAAUN,EAAOF,EAAeC,QAAA,IAAAA,IAAAA,EAAAA,CAAAA,GAiBpC,IAfE,MAIEA,EAAO,YAJTQ,OAAW,IAAG,EAAAF,EAAoB,EAClCG,EAGET,EAAO,YAHTU,OAAW,IAAG,EAAAH,EAAoB,EAClCI,EAEEX,EAAO,UAFTY,OAAS,IAAG,EAAAT,EAAS,EACrBU,EACEb,EAAO,UADTE,OAAS,IAAG,MAAG,EAGbY,EAASC,EACXA,EAAQhB,EAAOS,EAAa,UAC5BE,EACA,MAEEM,EAAQ,EACRC,EAAMH,EAAOI,OAGe,OAAzBJ,EAAOK,OAAOH,IAAiBA,IACtC,KAAkC,OAA3BF,EAAOK,OAAOF,EAAM,IAAaA,IAGxC,OAAOH,EAAOM,MAAMJ,EAAOC,GAAKI,MAAM,MAAMC,IAAIV,GAAWW,KAAKrB,EAClE,CAKA,SAASa,EAAQhB,EAAeyB,EAAuBC,GACrD,OAAID,aAAcE,OAAe3B,EAAMgB,QAAQS,EAAIC,GAC5CD,EAAGG,QAAO,SAAC5B,EAAOyB,GAAO,OAAAzB,EAAMgB,QAAQS,EAAIC,EAAlB,GAA0B1B,EAC5D,C,iFC5CM,SAAUV,EAAUU,EAAeC,GACvC,YADuC,IAAAA,IAAAA,EAAAA,CAAAA,IAChCF,EAAAA,EAAAA,GAAQC,GAAO,SACpBG,UAAW,KACRF,GAEP,C","sources":["pages/dashboard/EcommerceProductEditPage.tsx","../node_modules/dot-case/src/index.ts","../node_modules/lower-case/src/index.ts","../node_modules/no-case/src/index.ts","../node_modules/param-case/src/index.ts"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\nimport { useEffect } from 'react';\nimport { paramCase } from 'change-case';\nimport { useParams } from 'react-router-dom';\n// @mui\nimport { Container } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getProducts } from '../../redux/slices/DN404';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// components\nimport CustomBreadcrumbs from '../../components/custom-breadcrumbs';\nimport { useSettingsContext } from '../../components/settings';\n// sections\nimport ProductNewEditForm from '../../sections/@dashboard/e-commerce/ProductNewEditForm';\n\n// ----------------------------------------------------------------------\n\nexport default function EcommerceProductEditPage() {\n  const { themeStretch } = useSettingsContext();\n\n  const dispatch = useDispatch();\n\n  const { name } = useParams();\n\n  const currentProduct = useSelector((state) =>\n    state.product.products.find((product) => paramCase(product.name) === name)\n  );\n\n  useEffect(() => {\n    dispatch(getProducts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title> Ecommerce: Edit product | NotPump</title>\n      </Helmet>\n\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <CustomBreadcrumbs\n          heading=\"Edit product\"\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            {\n              name: 'E-Commerce',\n              href: PATH_DASHBOARD.dn404.root,\n            },\n            { name: currentProduct?.name },\n          ]}\n        />\n\n        <ProductNewEditForm isEdit currentProduct={currentProduct} />\n      </Container>\n    </>\n  );\n}\n","import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function dotCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \".\",\n    ...options,\n  });\n}\n","/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      Į: \"\\u012F\\u0307\",\n      Ì: \"\\u0069\\u0307\\u0300\",\n      Í: \"\\u0069\\u0307\\u0301\",\n      Ĩ: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n","import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n","import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function paramCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n"],"names":["EcommerceProductEditPage","themeStretch","useSettingsContext","dispatch","useDispatch","name","useParams","currentProduct","useSelector","state","product","products","find","paramCase","useEffect","getProducts","maxWidth","heading","links","href","PATH_DASHBOARD","isEdit","dotCase","input","options","noCase","delimiter","lowerCase","str","toLowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","splitRegexp","_b","stripRegexp","_c","transform","_d","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce"],"sourceRoot":""}