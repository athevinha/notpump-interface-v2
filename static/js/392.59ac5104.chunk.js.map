{"version":3,"file":"static/js/392.59ac5104.chunk.js","mappings":"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","sources":["components/badge-status/styles.tsx","components/badge-status/BadgeStatus.tsx","components/custom-input/CustomSmallSelect.tsx","components/custom-input/CustomTextField.tsx","components/custom-input/IncrementerButton.tsx","sections/@dashboard/chat/nav/ChatNavItem.tsx","sections/@dashboard/chat/nav/ChatNavList.tsx","sections/@dashboard/chat/nav/ChatNavSearch.tsx","sections/@dashboard/chat/nav/ChatNavAccount.tsx","sections/@dashboard/chat/nav/ChatNavSearchResults.tsx","sections/@dashboard/chat/nav/ChatNav.tsx","sections/@dashboard/chat/room/ChatRoomCollapseButton.tsx","sections/@dashboard/chat/room/ChatRoomAttachments.tsx","sections/@dashboard/chat/room/ChatRoomSingle.tsx","sections/@dashboard/chat/room/ChatRoomParticipantInfoDialog.tsx","sections/@dashboard/chat/room/ChatRoomGroup.tsx","sections/@dashboard/chat/room/ChatRoom.tsx","sections/@dashboard/chat/message/ChatMessageInput.tsx","sections/@dashboard/chat/message/ChatMessageItem.tsx","sections/@dashboard/chat/message/ChatMessageList.tsx","sections/@dashboard/chat/header/ChatHeaderDetail.tsx","sections/@dashboard/chat/header/ChatHeaderCompose.tsx","sections/@dashboard/chat/Chat.tsx","pages/dashboard/ChatPage.tsx"],"sourcesContent":["// @mui\nimport { Theme, styled } from '@mui/material/styles';\n//\nimport { BadgeStatusValue, BadgeSizeValue } from './types';\n\n// ----------------------------------------------------------------------\n\nexport const StyledBadgeStatus = styled('span')(\n  ({\n    theme,\n    ownerState,\n  }: {\n    theme: Theme;\n    ownerState: {\n      size: BadgeSizeValue;\n      status: BadgeStatusValue;\n    };\n  }) => {\n    const { status, size } = ownerState;\n\n    return {\n      width: 10,\n      height: 10,\n      display: 'flex',\n      borderRadius: '50%',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&:before, &:after': {\n        content: \"''\",\n        borderRadius: 1,\n        backgroundColor: theme.palette.common.white,\n      },\n\n      ...(size === 'small' && { width: 8, height: 8 }),\n\n      ...(size === 'large' && { width: 12, height: 12 }),\n\n      ...(status === 'offline' && { backgroundColor: 'transparent' }),\n\n      ...(status === 'away' && {\n        backgroundColor: theme.palette.warning.main,\n        '&:before': {\n          width: 2,\n          height: 4,\n          transform: 'translateX(1px) translateY(-1px)',\n        },\n        '&:after': {\n          width: 2,\n          height: 4,\n          transform: 'translateY(1px) rotate(125deg)',\n        },\n      }),\n\n      ...(status === 'busy' && {\n        backgroundColor: theme.palette.error.main,\n        '&:before': { width: 6, height: 2 },\n      }),\n\n      ...(status === 'online' && {\n        backgroundColor: theme.palette.success.main,\n      }),\n\n      ...(status === 'invisible' && {\n        backgroundColor: theme.palette.text.disabled,\n        '&:before': {\n          width: 6,\n          height: 6,\n          borderRadius: '50%',\n        },\n      }),\n\n      ...(status === 'unread' && {\n        backgroundColor: theme.palette.info.main,\n      }),\n    };\n  }\n);\n","// @mui\nimport { useTheme } from '@mui/material/styles';\n//\nimport { StyledBadgeStatus } from './styles';\nimport { BadgeStatusProps } from './types';\n\n// ----------------------------------------------------------------------\n\nexport default function BadgeStatus({ size = 'medium', status = 'offline', sx }: BadgeStatusProps) {\n  const theme = useTheme();\n\n  return <StyledBadgeStatus ownerState={{ status, size }} sx={sx} theme={theme} />;\n}\n","// @mui\nimport { alpha, styled } from '@mui/material/styles';\nimport { TextField, TextFieldProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst CustomSmallSelect = styled((props: TextFieldProps) => (\n  <TextField select SelectProps={{ native: true }} {...props} />\n))(({ theme }) => ({\n  '& fieldset': {\n    display: 'none',\n  },\n  '& select': {\n    ...theme.typography.subtitle2,\n    padding: theme.spacing(0.5, 0, 0.5, 1),\n    paddingRight: '28px !important',\n  },\n  '& .MuiOutlinedInput-root': {\n    borderRadius: Number(theme.shape.borderRadius) * 0.75,\n    backgroundColor: alpha(theme.palette.grey[500], 0.08),\n  },\n}));\n\nexport default CustomSmallSelect;\n","// @mui\nimport { alpha, styled } from '@mui/material/styles';\nimport { TextField, TextFieldProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ntype Props = TextFieldProps & {\n  width?: number;\n};\n\nconst CustomTextField = styled(TextField, {\n  shouldForwardProp: (prop) => prop !== 'width',\n})<Props>(({ width, theme }) => ({\n  '& fieldset': {\n    display: 'none',\n  },\n  '& .MuiOutlinedInput-root': {\n    width,\n    border: `solid 1px ${alpha(theme.palette.grey[500], 0.32)}`,\n    transition: theme.transitions.create(['box-shadow', 'width'], {\n      duration: theme.transitions.duration.shorter,\n    }),\n    '&.Mui-focused': {\n      boxShadow: theme.customShadows.z20,\n      ...(width && {\n        [theme.breakpoints.up('sm')]: {\n          width: width + 60,\n        },\n      }),\n    },\n  },\n}));\n\nexport default CustomTextField;\n","import { forwardRef } from 'react';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport { Stack, IconButton, StackProps } from '@mui/material';\n// components\nimport Iconify from '../iconify';\n\n// ----------------------------------------------------------------------\n\ninterface IncrementerButtonProps extends StackProps {\n  name?: string;\n  quantity: number;\n  disabledIncrease?: boolean;\n  disabledDecrease?: boolean;\n  onIncrease: VoidFunction;\n  onDecrease: VoidFunction;\n}\n\nconst IncrementerButton = forwardRef<HTMLDivElement, IncrementerButtonProps>(\n  ({ quantity, onIncrease, onDecrease, disabledIncrease, disabledDecrease, sx, ...other }, ref) => (\n    <Stack\n      ref={ref}\n      flexShrink={0}\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      sx={{\n        mb: 0.5,\n        py: 0.5,\n        px: 0.75,\n        width: 96,\n        borderRadius: 1,\n        border: (theme) => `solid 1px ${alpha(theme.palette.grey[500], 0.32)}`,\n        ...sx,\n      }}\n      {...other}\n    >\n      <IconButton\n        size=\"small\"\n        color=\"inherit\"\n        onClick={onDecrease}\n        disabled={disabledDecrease}\n        sx={{ color: 'text.secondary' }}\n      >\n        <Iconify icon=\"eva:minus-fill\" width={16} />\n      </IconButton>\n\n      {quantity}\n\n      <IconButton\n        size=\"small\"\n        color=\"inherit\"\n        onClick={onIncrease}\n        disabled={disabledIncrease}\n        sx={{ color: 'text.secondary' }}\n      >\n        <Iconify icon=\"eva:plus-fill\" width={16} />\n      </IconButton>\n    </Stack>\n  )\n);\n\nexport default IncrementerButton;\n","import { formatDistanceToNowStrict } from 'date-fns';\n// @mui\nimport {\n  Badge,\n  Stack,\n  Typography,\n  ListItemText,\n  ListItemButton,\n  ListItemAvatar,\n} from '@mui/material';\n// @types\nimport { IChatConversation } from '../../../../@types/chat';\n// components\nimport { CustomAvatar, CustomAvatarGroup } from '../../../../components/custom-avatar';\nimport BadgeStatus from '../../../../components/badge-status';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ntype Props = {\n  conversation: IChatConversation;\n  openNav: boolean;\n  isSelected: boolean;\n  onSelect: VoidFunction;\n};\n\nexport default function ChatNavItem({ conversation, openNav, isSelected, onSelect }: Props) {\n  const details = getDetails(conversation, CURRENT_USER_ID);\n\n  const lastActivity = conversation.messages[conversation.messages.length - 1].createdAt;\n\n  const isGroup = details.otherParticipants.length > 1;\n\n  const isUnread = conversation.unreadCount > 0;\n\n  const hasOnlineInGroup =\n    isGroup && details.otherParticipants.map((item) => item.status).includes('online');\n\n  return (\n    <ListItemButton\n      disableGutters\n      onClick={onSelect}\n      sx={{\n        py: 1.5,\n        px: 2.5,\n        ...(isSelected && {\n          bgcolor: 'action.selected',\n        }),\n      }}\n    >\n      <ListItemAvatar>\n        {isGroup ? (\n          <Badge\n            overlap=\"circular\"\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            badgeContent={hasOnlineInGroup && <BadgeStatus status=\"online\" />}\n          >\n            <CustomAvatarGroup compact sx={{ width: 48, height: 48 }}>\n              {details.otherParticipants.slice(0, 2).map((participant) => (\n                <CustomAvatar\n                  key={participant.id}\n                  alt={participant.name}\n                  src={participant.avatar}\n                />\n              ))}\n            </CustomAvatarGroup>\n          </Badge>\n        ) : (\n          <CustomAvatar\n            key={details.otherParticipants[0].id}\n            alt={details.otherParticipants[0].name}\n            src={details.otherParticipants[0].avatar}\n            BadgeProps={{\n              badgeContent: <BadgeStatus status={details.otherParticipants[0].status} />,\n            }}\n            sx={{ width: 48, height: 48 }}\n          />\n        )}\n      </ListItemAvatar>\n\n      {openNav && (\n        <>\n          <ListItemText\n            primary={details.displayNames}\n            primaryTypographyProps={{ noWrap: true, variant: 'subtitle2' }}\n            secondary={details.displayText}\n            secondaryTypographyProps={{\n              noWrap: true,\n              variant: isUnread ? 'subtitle2' : 'body2',\n              color: isUnread ? 'text.primary' : 'text.secondary',\n            }}\n          />\n\n          <Stack alignItems=\"flex-end\" sx={{ ml: 2, height: 44 }}>\n            <Typography\n              noWrap\n              variant=\"body2\"\n              component=\"span\"\n              sx={{\n                mb: 1.5,\n                fontSize: 12,\n                color: 'text.disabled',\n              }}\n            >\n              {formatDistanceToNowStrict(new Date(lastActivity), {\n                addSuffix: false,\n              })}\n            </Typography>\n\n            {isUnread && <BadgeStatus status=\"unread\" size=\"small\" />}\n          </Stack>\n        </>\n      )}\n    </ListItemButton>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nconst getDetails = (conversation: IChatConversation, currentUserId: string) => {\n  const otherParticipants = conversation.participants.filter(\n    (participant) => participant.id !== currentUserId\n  );\n\n  const displayNames = otherParticipants.map((participant) => participant.name).join(', ');\n\n  let displayText = '';\n\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n\n    displayText = `${sender}${message}`;\n  }\n  return { otherParticipants, displayNames, displayText };\n};\n","import { useNavigate } from 'react-router-dom';\n// @mui\nimport { List, SxProps } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../../../routes/paths';\n// hooks\nimport useResponsive from '../../../../hooks/useResponsive';\n// @types\nimport { IChatConversationsState } from '../../../../@types/chat';\n// components\nimport { SkeletonConversationItem } from '../../../../components/skeleton';\n//\nimport ChatNavItem from './ChatNavItem';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ntype Props = {\n  conversations: IChatConversationsState;\n  openNav: boolean;\n  onCloseNav: VoidFunction;\n  selected: (conversationId: string) => boolean;\n  sx?: SxProps;\n};\n\nexport default function ChatNavList({\n  conversations,\n  openNav,\n  onCloseNav,\n  selected,\n  sx,\n  ...other\n}: Props) {\n  const navigate = useNavigate();\n\n  const isDesktop = useResponsive('up', 'md');\n\n  const handleSelectConversation = (conversationId: string) => {\n    let conversationKey = '';\n\n    const conversation = conversations.byId[conversationId];\n\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(\n        (participant) => participant.id !== CURRENT_USER_ID\n      );\n\n      if (otherParticipant?.username) {\n        conversationKey = otherParticipant?.username;\n      }\n    }\n\n    navigate(PATH_DASHBOARD.chat.view(conversationKey));\n  };\n\n  const loading = !conversations.allIds.length;\n\n  return (\n    <List disablePadding sx={sx} {...other}>\n      {(loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) =>\n        conversationId ? (\n          <ChatNavItem\n            key={conversationId}\n            openNav={openNav}\n            conversation={conversations.byId[conversationId]}\n            isSelected={selected(conversationId)}\n            onSelect={() => {\n              if (!isDesktop) {\n                onCloseNav();\n              }\n              handleSelectConversation(conversationId);\n            }}\n          />\n        ) : (\n          <SkeletonConversationItem key={index} />\n        )\n      )}\n    </List>\n  );\n}\n","// @mui\nimport { InputAdornment, ClickAwayListener } from '@mui/material';\n// components\nimport Iconify from '../../../../components/iconify';\nimport { CustomTextField } from '../../../../components/custom-input';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  value: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onClickAway: VoidFunction;\n};\n\nexport default function ChatNavSearch({ value, onChange, onClickAway }: Props) {\n  return (\n    <ClickAwayListener onClickAway={onClickAway}>\n      <CustomTextField\n        fullWidth\n        size=\"small\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Search contacts...\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\n            </InputAdornment>\n          ),\n        }}\n        sx={{ mt: 2.5 }}\n      />\n    </ClickAwayListener>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport {\n  List,\n  Stack,\n  Select,\n  Divider,\n  Tooltip,\n  MenuItem,\n  Typography,\n  IconButton,\n} from '@mui/material';\n// auth\nimport { useAuthContext } from '../../../../auth/useAuthContext';\n// components\nimport Iconify from '../../../../components/iconify';\nimport { CustomAvatar } from '../../../../components/custom-avatar';\nimport MenuPopover from '../../../../components/menu-popover';\nimport BadgeStatus, { BadgeStatusValue } from '../../../../components/badge-status';\n\n// ----------------------------------------------------------------------\n\nconst STATUS = ['online', 'invisible', 'away'] as const;\n\nexport default function ChatNavAccount() {\n  const { user } = useAuthContext();\n\n  const [status, setStatus] = useState<BadgeStatusValue>('online');\n\n  const [openPopover, setOpenPopover] = useState<HTMLElement | null>(null);\n\n  const handleOpenPopover = (event: React.MouseEvent<HTMLElement>) => {\n    setOpenPopover(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setOpenPopover(null);\n  };\n\n  return (\n    <>\n      <CustomAvatar\n        src={user?.photoURL}\n        alt={user?.displayName}\n        name={user?.displayName}\n        BadgeProps={{\n          badgeContent: <BadgeStatus status={status} />,\n        }}\n        onClick={handleOpenPopover}\n        sx={{ cursor: 'pointer', width: 48, height: 48 }}\n      />\n\n      <MenuPopover open={openPopover} onClose={handleClosePopover} arrow=\"top-left\" sx={{ p: 0 }}>\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ py: 2, pr: 1, pl: 2.5 }}>\n          <div>\n            <Typography noWrap variant=\"subtitle2\">\n              {user?.displayName}\n            </Typography>\n\n            <Typography noWrap variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              {user?.email}\n            </Typography>\n          </div>\n\n          <Tooltip title=\"Log out\">\n            <IconButton color=\"error\">\n              <Iconify icon=\"ic:round-power-settings-new\" />\n            </IconButton>\n          </Tooltip>\n        </Stack>\n\n        <Divider />\n\n        <List sx={{ px: 1 }}>\n          <MenuItem>\n            <BadgeStatus size=\"large\" status={status} sx={{ m: 0.5, flexShrink: 0 }} />\n\n            <Select\n              native\n              fullWidth\n              value={status}\n              onChange={(event) => setStatus(event.target.value)}\n              sx={{\n                '& .MuiInputBase-input': {\n                  p: 0,\n                  pl: 2,\n                  typography: 'body2',\n                  textTransform: 'capitalize',\n                },\n                '& .MuiNativeSelect-icon': {\n                  right: -16,\n                  top: 'unset',\n                },\n                '& .MuiOutlinedInput-notchedOutline': {\n                  display: 'none',\n                },\n              }}\n            >\n              {STATUS.map((option) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </Select>\n          </MenuItem>\n\n          <MenuItem>\n            <Iconify icon=\"ic:round-account-box\" />\n            Profile\n          </MenuItem>\n\n          <MenuItem>\n            <Iconify icon=\"eva:settings-2-fill\" />\n            Settings\n          </MenuItem>\n        </List>\n      </MenuPopover>\n    </>\n  );\n}\n","// @mui\nimport { Avatar, Typography, ListItemButton } from '@mui/material';\n// @types\nimport { IChatContact } from '../../../../@types/chat';\n//\nimport SearchNotFound from '../../../../components/search-not-found';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  searchContacts: string;\n  searchResults: IChatContact[];\n  onSelectContact: (contact: IChatContact) => void;\n};\n\nexport default function ChatNavSearchResults({\n  searchContacts,\n  searchResults,\n  onSelectContact,\n}: Props) {\n  const isNotFound = !searchResults.length && !!searchContacts;\n\n  return (\n    <>\n      <Typography\n        paragraph\n        variant=\"h6\"\n        sx={{\n          px: 2.5,\n        }}\n      >\n        Contacts\n      </Typography>\n\n      {isNotFound ? (\n        <SearchNotFound\n          query={searchContacts}\n          sx={{\n            p: 3,\n            mx: 'auto',\n            width: `calc(100% - 40px)`,\n            bgcolor: 'background.neutral',\n          }}\n        />\n      ) : (\n        <>\n          {searchResults.map((result) => (\n            <ListItemButton\n              key={result.id}\n              onClick={() => onSelectContact(result)}\n              sx={{\n                px: 2.5,\n                py: 1.5,\n                typography: 'subtitle2',\n              }}\n            >\n              <Avatar alt={result.name} src={result.avatar} sx={{ mr: 2 }} />\n              {result.name}\n            </ListItemButton>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// @mui\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Box, Stack, Drawer, IconButton, IconButtonProps } from '@mui/material';\n// hooks\nimport useResponsive from '../../../../hooks/useResponsive';\n// utils\nimport axios from '../../../../utils/axios';\n// routes\nimport { PATH_DASHBOARD } from '../../../../routes/paths';\n// @types\nimport { IChatContact, IChatConversationsState } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\nimport Scrollbar from '../../../../components/scrollbar';\n//\nimport ChatNavList from './ChatNavList';\nimport ChatNavSearch from './ChatNavSearch';\nimport ChatNavAccount from './ChatNavAccount';\nimport ChatNavSearchResults from './ChatNavSearchResults';\n\n// ----------------------------------------------------------------------\n\nconst StyledToggleButton = styled((props) => (\n  <IconButton disableRipple {...props} />\n))<IconButtonProps>(({ theme }) => ({\n  left: 0,\n  zIndex: 9,\n  width: 32,\n  height: 32,\n  position: 'absolute',\n  top: theme.spacing(13),\n  borderRadius: `0 12px 12px 0`,\n  color: theme.palette.primary.contrastText,\n  backgroundColor: theme.palette.primary.main,\n  boxShadow: theme.customShadows.primary,\n  '&:hover': {\n    backgroundColor: theme.palette.primary.darker,\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nconst NAV_WIDTH = 320;\n\nconst NAV_COLLAPSE_WIDTH = 96;\n\ntype Props = {\n  conversations: IChatConversationsState;\n  activeConversationId: string | null;\n};\n\nexport default function ChatNav({ conversations, activeConversationId }: Props) {\n  const theme = useTheme();\n\n  const navigate = useNavigate();\n\n  const isDesktop = useResponsive('up', 'md');\n\n  const [openNav, setOpenNav] = useState(false);\n\n  const [searchResults, setSearchResults] = useState([]);\n\n  const [searchContacts, setSearchContacts] = useState('');\n\n  const isCollapse = isDesktop && !openNav;\n\n  useEffect(() => {\n    if (!isDesktop) {\n      handleCloseNav();\n    } else {\n      handleOpenNav();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDesktop]);\n\n  const handleToggleNav = () => {\n    setOpenNav(!openNav);\n  };\n\n  const handleOpenNav = () => {\n    setOpenNav(true);\n  };\n\n  const handleCloseNav = () => {\n    setOpenNav(false);\n  };\n\n  const handleChangeSearch = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const { value } = event.target;\n\n      setSearchContacts(value);\n\n      if (value) {\n        const response = await axios.get('/api/chat/search', {\n          params: { query: value },\n        });\n\n        setSearchResults(response.data.results);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleSelectContact = (result: IChatContact) => {\n    setSearchContacts('');\n    navigate(PATH_DASHBOARD.chat.view(result.username));\n  };\n\n  const renderContent = (\n    <>\n      <Box sx={{ p: 2.5 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n          {!isCollapse && (\n            <>\n              <ChatNavAccount />\n              <Box sx={{ flexGrow: 1 }} />\n            </>\n          )}\n\n          <IconButton onClick={handleToggleNav}>\n            <Iconify icon={openNav ? 'eva:arrow-ios-back-fill' : 'eva:arrow-ios-forward-fill'} />\n          </IconButton>\n\n          {!isCollapse && (\n            <IconButton component={RouterLink} to={PATH_DASHBOARD.chat.new}>\n              <Iconify icon=\"eva:edit-fill\" />\n            </IconButton>\n          )}\n        </Stack>\n\n        {!isCollapse && (\n          <ChatNavSearch\n            value={searchContacts}\n            onChange={handleChangeSearch}\n            onClickAway={() => setSearchContacts('')}\n          />\n        )}\n      </Box>\n\n      <Scrollbar>\n        {!searchContacts ? (\n          <ChatNavList\n            openNav={openNav}\n            onCloseNav={handleCloseNav}\n            conversations={conversations}\n            selected={(conversationId: string) => activeConversationId === conversationId}\n          />\n        ) : (\n          <ChatNavSearchResults\n            searchContacts={searchContacts}\n            searchResults={searchResults}\n            onSelectContact={handleSelectContact}\n          />\n        )}\n      </Scrollbar>\n    </>\n  );\n\n  return (\n    <>\n      {!isDesktop && (\n        <StyledToggleButton onClick={handleToggleNav}>\n          <Iconify width={16} icon=\"eva:people-fill\" />\n        </StyledToggleButton>\n      )}\n\n      {isDesktop ? (\n        <Drawer\n          open={openNav}\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              pb: 1,\n              width: 1,\n              position: 'static',\n              ...(isCollapse && {\n                transform: 'none !important',\n                visibility: 'visible !important',\n              }),\n            },\n          }}\n          sx={{\n            width: NAV_WIDTH,\n            transition: theme.transitions.create('width'),\n            ...(isCollapse && {\n              width: NAV_COLLAPSE_WIDTH,\n            }),\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      ) : (\n        <Drawer\n          open={openNav}\n          onClose={handleCloseNav}\n          ModalProps={{ keepMounted: true }}\n          PaperProps={{\n            sx: {\n              pb: 1,\n              width: NAV_WIDTH,\n            },\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      )}\n    </>\n  );\n}\n","// @mui\nimport { Button, ButtonProps } from '@mui/material';\n// components\nimport Iconify from '../../../../components/iconify';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends ButtonProps {\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n}\n\nexport default function ChatRoomCollapseButton({\n  isCollapse,\n  onCollapse,\n  children,\n  sx,\n  ...other\n}: Props) {\n  return (\n    <Button\n      fullWidth\n      color=\"inherit\"\n      onClick={onCollapse}\n      endIcon={\n        <Iconify\n          width={16}\n          icon={isCollapse ? 'eva:arrow-ios-downward-fill' : 'eva:arrow-ios-forward-fill'}\n        />\n      }\n      sx={{\n        height: 40,\n        flexShrink: 0,\n        borderRadius: 0,\n        typography: 'overline',\n        color: 'text.disabled',\n        justifyContent: 'space-between',\n        p: (theme) => theme.spacing(1, 1.5, 1, 2.5),\n        ...sx,\n      }}\n      {...other}\n    >\n      {children}\n    </Button>\n  );\n}\n","import uniq from 'lodash/uniq';\nimport flatten from 'lodash/flatten';\n// @mui\nimport { Box, Typography, Stack } from '@mui/material';\n// utils\nimport { fDateTime } from '../../../../utils/formatTime';\n// @types\nimport { IChatConversation, IChatAttachment } from '../../../../@types/chat';\n// components\nimport Scrollbar from '../../../../components/scrollbar';\nimport FileThumbnail from '../../../../components/file-thumbnail';\n//\nimport ChatRoomCollapseButton from './ChatRoomCollapseButton';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  conversation: IChatConversation;\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n};\n\nexport default function ChatRoomAttachments({ conversation, isCollapse, onCollapse }: Props) {\n  const totalAttachments = uniq(flatten(conversation.messages.map((item) => item.attachments)));\n\n  return (\n    <Stack\n      flexGrow={1}\n      sx={{\n        pb: 2,\n        height: 1,\n        overflow: 'hidden',\n        borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\n      }}\n    >\n      <ChatRoomCollapseButton\n        isCollapse={isCollapse && !!totalAttachments.length}\n        onCollapse={onCollapse}\n        disabled={!totalAttachments.length}\n        sx={{\n          ...(!isCollapse && {\n            borderBottom: (theme) => `solid 1px ${theme.palette.divider}`,\n          }),\n        }}\n      >\n        Attachments ({totalAttachments.length})\n      </ChatRoomCollapseButton>\n\n      <Box\n        sx={{\n          overflow: 'hidden',\n          height: isCollapse ? 1 : 0,\n          transition: (theme) =>\n            theme.transitions.create('height', {\n              duration: theme.transitions.duration.shorter,\n            }),\n        }}\n      >\n        <Scrollbar>\n          {totalAttachments.map((attachment, index) => (\n            <AttachmentItem key={attachment.name + index} attachment={attachment} />\n          ))}\n        </Scrollbar>\n      </Box>\n    </Stack>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ntype AttachmentItemProps = {\n  attachment: IChatAttachment;\n};\n\nfunction AttachmentItem({ attachment }: AttachmentItemProps) {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" sx={{ mt: 2, px: 2.5 }}>\n      <Stack\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        sx={{\n          width: 40,\n          height: 40,\n          flexShrink: 0,\n          borderRadius: 1,\n          overflow: 'hidden',\n          position: 'relative',\n          backgroundColor: 'background.neutral',\n        }}\n      >\n        <FileThumbnail\n          imageView\n          file={attachment.preview}\n          onDownload={() => console.log('DOWNLOAD')}\n          sx={{ width: 28, height: 28 }}\n        />\n      </Stack>\n\n      <Stack flexGrow={1} sx={{ ml: 1.5, minWidth: 0 }}>\n        <Typography variant=\"body2\" noWrap>\n          {attachment.name}\n        </Typography>\n\n        <Typography noWrap variant=\"caption\" sx={{ color: 'text.secondary', display: 'block' }}>\n          {fDateTime(attachment.dateCreated)}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n}\n","// @mui\nimport { Avatar, Divider, Collapse, Typography, Stack } from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\n//\nimport ChatRoomCollapseButton from './ChatRoomCollapseButton';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  participant: IChatParticipant;\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n};\n\nexport default function ChatRoomSingle({ participant, isCollapse, onCollapse }: Props) {\n  if (!participant) {\n    return null;\n  }\n\n  return (\n    <div>\n      <Stack alignItems=\"center\" sx={{ py: 4 }}>\n        <Avatar\n          alt={participant.name}\n          src={participant.avatar}\n          sx={{ width: 96, height: 96, mb: 2 }}\n        />\n\n        <Typography variant=\"subtitle1\">{participant.name}</Typography>\n\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary', mt: 0.5 }}>\n          {participant.role}\n        </Typography>\n      </Stack>\n\n      <Divider />\n\n      <ChatRoomCollapseButton isCollapse={isCollapse} onCollapse={onCollapse}>\n        information\n      </ChatRoomCollapseButton>\n\n      <Collapse in={isCollapse}>\n        <Stack\n          spacing={2}\n          sx={{\n            p: (theme) => theme.spacing(2, 2.5, 2.5, 2.5),\n          }}\n        >\n          {[\n            { icon: 'eva:pin-fill', value: participant.address },\n            { icon: 'eva:phone-fill', value: participant.phone },\n            { icon: 'eva:email-fill', value: participant.email },\n          ].map((row, index) => (\n            <Stack key={row.icon} direction=\"row\">\n              <Iconify\n                icon={row.icon}\n                sx={{\n                  mr: 1,\n                  mt: 0.5,\n                  flexShrink: 0,\n                  color: 'text.disabled',\n                }}\n              />\n              <Typography variant=\"body2\" noWrap={index === 2}>\n                {row.value}\n              </Typography>\n            </Stack>\n          ))}\n        </Stack>\n      </Collapse>\n    </div>\n  );\n}\n","// @mui\nimport { Typography, Dialog, DialogContent, Stack, IconButton } from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport { CustomAvatar } from '../../../../components/custom-avatar';\nimport Iconify from '../../../../components/iconify';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  participant: IChatParticipant;\n  open: boolean;\n  onClose: VoidFunction;\n};\n\nexport default function ChatRoomParticipantInfoDialog({ participant, open, onClose }: Props) {\n  const { name, avatar, role, address } = participant;\n\n  return (\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={onClose}>\n      <IconButton onClick={onClose} sx={{ position: 'absolute', right: 8, top: 8 }}>\n        <Iconify icon=\"eva:close-fill\" />\n      </IconButton>\n\n      <DialogContent sx={{ p: 5 }}>\n        <Stack direction=\"row\" spacing={3}>\n          <CustomAvatar alt={name} src={avatar} name={name} sx={{ width: 96, height: 96 }} />\n\n          <Stack spacing={1}>\n            <Typography variant=\"caption\" sx={{ color: 'primary.main' }}>\n              {role}\n            </Typography>\n\n            <Typography variant=\"h6\">{name}</Typography>\n\n            <Stack direction=\"row\" sx={{ typography: 'caption', color: 'text.secondary' }}>\n              <Iconify icon=\"eva:pin-fill\" width={16} sx={{ flexShrink: 0, mr: 0.5 }} />\n              {address}\n            </Stack>\n\n            <Stack direction=\"row\" sx={{ pt: 1 }}>\n              <IconButton color=\"info\">\n                <Iconify icon=\"eva:message-square-fill\" />\n              </IconButton>\n\n              <IconButton color=\"warning\">\n                <Iconify icon=\"eva:email-fill\" />\n              </IconButton>\n\n              <IconButton color=\"success\">\n                <Iconify icon=\"eva:phone-fill\" />\n              </IconButton>\n\n              <IconButton color=\"error\">\n                <Iconify icon=\"eva:video-fill\" />\n              </IconButton>\n            </Stack>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","// @mui\nimport { Box, ListItemText, ListItemAvatar, ListItemButton } from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport { CustomAvatar } from '../../../../components/custom-avatar';\nimport Scrollbar from '../../../../components/scrollbar';\nimport BadgeStatus from '../../../../components/badge-status';\n//\nimport ChatRoomParticipantInfoDialog from './ChatRoomParticipantInfoDialog';\nimport ChatRoomCollapseButton from './ChatRoomCollapseButton';\n\n// ----------------------------------------------------------------------\n\nconst HEIGHT = 60;\n\ntype Props = {\n  participants: IChatParticipant[];\n  selectUserId: string | null;\n  onOpenUserInfo: (id: string | null) => void;\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n};\n\nexport default function ChatRoomGroup({\n  participants,\n  selectUserId,\n  onOpenUserInfo,\n  isCollapse,\n  onCollapse,\n}: Props) {\n  return (\n    <>\n      <ChatRoomCollapseButton isCollapse={isCollapse} onCollapse={onCollapse}>\n        In room ({participants.length})\n      </ChatRoomCollapseButton>\n\n      <Box\n        sx={{\n          height: isCollapse ? HEIGHT * 4 : 0,\n          transition: (theme) =>\n            theme.transitions.create('height', {\n              duration: theme.transitions.duration.shorter,\n            }),\n        }}\n      >\n        <Scrollbar>\n          {participants.map((participant) => (\n            <Participant\n              key={participant.id}\n              participant={participant}\n              open={selectUserId === participant.id}\n              onOpen={() => onOpenUserInfo(participant.id)}\n              onClose={() => onOpenUserInfo(null)}\n            />\n          ))}\n        </Scrollbar>\n      </Box>\n    </>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ntype ParticipantProps = {\n  participant: IChatParticipant;\n  open: boolean;\n  onClose: VoidFunction;\n  onOpen: VoidFunction;\n};\n\nfunction Participant({ participant, open, onClose, onOpen }: ParticipantProps) {\n  const { name, avatar, status, role } = participant;\n\n  return (\n    <>\n      <ListItemButton onClick={onOpen} sx={{ height: HEIGHT, px: 2.5 }}>\n        <ListItemAvatar>\n          <CustomAvatar\n            alt={name}\n            src={avatar}\n            BadgeProps={{\n              badgeContent: <BadgeStatus status={status} />,\n            }}\n          />\n        </ListItemAvatar>\n\n        <ListItemText\n          primary={name}\n          secondary={role}\n          primaryTypographyProps={{ noWrap: true, variant: 'subtitle2' }}\n          secondaryTypographyProps={{ noWrap: true }}\n        />\n      </ListItemButton>\n\n      <ChatRoomParticipantInfoDialog participant={participant} open={open} onClose={onClose} />\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\n// @mui\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Box, Drawer, IconButton, IconButtonProps } from '@mui/material';\n// hooks\nimport useResponsive from '../../../../hooks/useResponsive';\n// @types\nimport { IChatConversation, IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\n//\nimport ChatRoomAttachments from './ChatRoomAttachments';\nimport ChatRoomSingle from './ChatRoomSingle';\nimport ChatRoomGroup from './ChatRoomGroup';\n\n// ----------------------------------------------------------------------\n\nconst StyledToggleButton = styled((props) => (\n  <IconButton disableRipple {...props} />\n))<IconButtonProps>(({ theme }) => ({\n  right: 0,\n  zIndex: 9,\n  width: 32,\n  height: 32,\n  position: 'absolute',\n  top: theme.spacing(1),\n  boxShadow: theme.customShadows.z8,\n  backgroundColor: theme.palette.background.paper,\n  border: `solid 1px ${theme.palette.divider}`,\n  borderRight: 0,\n  borderRadius: `12px 0 0 12px`,\n  transition: theme.transitions.create('all'),\n  '&:hover': {\n    backgroundColor: theme.palette.background.neutral,\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nconst NAV_WIDTH = 240;\n\ntype Props = {\n  conversation: IChatConversation;\n  participants: IChatParticipant[];\n};\n\nexport default function ChatRoom({ conversation, participants }: Props) {\n  const theme = useTheme();\n\n  const isDesktop = useResponsive('up', 'lg');\n\n  const [openNav, setOpenNav] = useState(true);\n\n  const [openInfo, setOpenInfo] = useState(true);\n\n  const [openAttachments, setOpenAttachments] = useState(true);\n\n  const [openParticipants, setOpenParticipants] = useState(true);\n\n  const [selectUser, setSelectUser] = useState<string | null>(null);\n\n  const onOpenNav = () => {\n    setOpenNav(true);\n  };\n\n  const onCloseNav = () => {\n    setOpenNav(false);\n  };\n\n  const isGroup = participants.length > 1;\n\n  useEffect(() => {\n    if (!isDesktop) {\n      onCloseNav();\n    } else {\n      onOpenNav();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDesktop]);\n\n  const renderContent = (\n    <>\n      {isGroup ? (\n        <ChatRoomGroup\n          selectUserId={selectUser}\n          participants={participants}\n          isCollapse={openParticipants}\n          onCollapse={() => setOpenParticipants(!openParticipants)}\n          onOpenUserInfo={(participantId) => setSelectUser(participantId)}\n        />\n      ) : (\n        <ChatRoomSingle\n          participant={participants[0]}\n          isCollapse={openInfo}\n          onCollapse={() => setOpenInfo(!openInfo)}\n        />\n      )}\n\n      <ChatRoomAttachments\n        conversation={conversation}\n        isCollapse={openAttachments}\n        onCollapse={() => setOpenAttachments(!openAttachments)}\n      />\n    </>\n  );\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <StyledToggleButton\n        onClick={() => setOpenNav(!openNav)}\n        sx={{\n          ...(openNav &&\n            isDesktop && {\n              right: NAV_WIDTH,\n            }),\n        }}\n      >\n        <Iconify\n          width={16}\n          icon={openNav ? 'eva:arrow-ios-forward-fill' : 'eva:arrow-ios-back-fill'}\n        />\n      </StyledToggleButton>\n\n      {isDesktop ? (\n        <Drawer\n          open={openNav}\n          anchor=\"right\"\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              width: 1,\n              position: 'static',\n            },\n          }}\n          sx={{\n            height: 1,\n            width: NAV_WIDTH,\n            transition: theme.transitions.create('width'),\n            ...(!openNav && {\n              width: 0,\n            }),\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      ) : (\n        <Drawer\n          anchor=\"right\"\n          open={openNav}\n          onClose={onCloseNav}\n          ModalProps={{ keepMounted: true }}\n          PaperProps={{\n            sx: {\n              width: NAV_WIDTH,\n            },\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      )}\n    </Box>\n  );\n}\n","import { useRef, useState } from 'react';\n// @mui\nimport { Stack, InputBase, InputBaseProps, IconButton, InputAdornment } from '@mui/material';\n// utils\nimport uuidv4 from '../../../../utils/uuidv4';\n// @types\nimport { IChatSendMessage } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ninterface Props extends InputBaseProps {\n  conversationId: string | null;\n  onSend: (data: IChatSendMessage) => void;\n}\n\nexport default function ChatMessageInput({\n  disabled,\n  conversationId,\n  onSend,\n  sx,\n  ...other\n}: Props) {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [message, setMessage] = useState('');\n\n  const handleClickAttach = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleSend = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      if (onSend && message && conversationId) {\n        onSend({\n          conversationId,\n          messageId: uuidv4(),\n          message,\n          contentType: 'text',\n          attachments: [],\n          createdAt: new Date(),\n          senderId: CURRENT_USER_ID,\n        });\n      }\n      setMessage('');\n    }\n  };\n\n  return (\n    <>\n      <InputBase\n        value={message}\n        onKeyUp={handleSend}\n        onChange={(event) => setMessage(event.target.value)}\n        placeholder=\"Type a message\"\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <IconButton size=\"small\">\n              <Iconify icon=\"eva:smiling-face-fill\" />\n            </IconButton>\n          </InputAdornment>\n        }\n        endAdornment={\n          <Stack direction=\"row\" spacing={1} sx={{ flexShrink: 0, mr: 1.5 }}>\n            <IconButton disabled={disabled} size=\"small\" onClick={handleClickAttach}>\n              <Iconify icon=\"ic:round-add-photo-alternate\" />\n            </IconButton>\n\n            <IconButton disabled={disabled} size=\"small\" onClick={handleClickAttach}>\n              <Iconify icon=\"eva:attach-2-fill\" />\n            </IconButton>\n\n            <IconButton disabled={disabled} size=\"small\">\n              <Iconify icon=\"eva:mic-fill\" />\n            </IconButton>\n          </Stack>\n        }\n        sx={{\n          pl: 1,\n          height: 56,\n          flexShrink: 0,\n          borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\n          ...sx,\n        }}\n        {...other}\n      />\n\n      <input type=\"file\" ref={fileInputRef} style={{ display: 'none' }} />\n    </>\n  );\n}\n","import { formatDistanceToNowStrict } from 'date-fns';\n// @mui\nimport { Avatar, Typography, Stack } from '@mui/material';\n// @types\nimport { IChatConversation, IChatMessage } from '../../../../@types/chat';\n// components\nimport Image from '../../../../components/image';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ntype Props = {\n  message: IChatMessage;\n  conversation: IChatConversation;\n  onOpenLightbox: (value: string) => void;\n};\n\nexport default function ChatMessageItem({ message, conversation, onOpenLightbox }: Props) {\n  const sender = conversation.participants.find(\n    (participant) => participant.id === message.senderId\n  );\n\n  const senderDetails =\n    message.senderId === CURRENT_USER_ID\n      ? {\n          type: 'me',\n        }\n      : {\n          avatar: sender?.avatar,\n          name: sender?.name,\n        };\n\n  const currentUser = senderDetails.type === 'me';\n\n  const isImage = message.contentType === 'image';\n\n  const firstName = senderDetails.name && senderDetails.name.split(' ')[0];\n\n  return (\n    <Stack direction=\"row\" justifyContent={currentUser ? 'flex-end' : 'unset'} sx={{ mb: 3 }}>\n      {!currentUser && (\n        <Avatar\n          alt={senderDetails.name}\n          src={senderDetails.avatar}\n          sx={{ width: 32, height: 32, mr: 2 }}\n        />\n      )}\n\n      <Stack spacing={1} alignItems=\"flex-end\">\n        <Typography\n          noWrap\n          variant=\"caption\"\n          sx={{\n            color: 'text.disabled',\n            ...(!currentUser && {\n              mr: 'auto',\n            }),\n          }}\n        >\n          {!currentUser && `${firstName},`} &nbsp;\n          {formatDistanceToNowStrict(new Date(message.createdAt), {\n            addSuffix: true,\n          })}\n        </Typography>\n\n        <Stack\n          sx={{\n            p: 1.5,\n            minWidth: 48,\n            maxWidth: 320,\n            borderRadius: 1,\n            overflow: 'hidden',\n            typography: 'body2',\n            bgcolor: 'background.neutral',\n            ...(currentUser && {\n              color: 'grey.800',\n              bgcolor: 'primary.lighter',\n            }),\n            ...(isImage && {\n              p: 0,\n            }),\n          }}\n        >\n          {isImage ? (\n            <Image\n              alt=\"attachment\"\n              src={message.body}\n              onClick={() => onOpenLightbox(message.body)}\n              sx={{\n                cursor: 'pointer',\n                '&:hover': {\n                  opacity: 0.9,\n                },\n              }}\n            />\n          ) : (\n            message.body\n          )}\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n}\n","import { useEffect, useState, useRef } from 'react';\n// @types\nimport { IChatConversation } from '../../../../@types/chat';\n//\nimport Scrollbar from '../../../../components/scrollbar';\nimport Lightbox from '../../../../components/lightbox';\n//\nimport ChatMessageItem from './ChatMessageItem';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  conversation: IChatConversation;\n};\n\nexport default function ChatMessageList({ conversation }: Props) {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  const [selectedImage, setSelectedImage] = useState<number>(-1);\n\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      }\n    };\n    scrollMessagesToBottom();\n  }, [conversation.messages]);\n\n  const imagesLightbox = conversation.messages\n    .filter((messages) => messages.contentType === 'image')\n    .map((messages) => ({ src: messages.body }));\n\n  const handleOpenLightbox = (imageUrl: string) => {\n    const imageIndex = imagesLightbox.findIndex((image) => image.src === imageUrl);\n    setSelectedImage(imageIndex);\n  };\n\n  const handleCloseLightbox = () => {\n    setSelectedImage(-1);\n  };\n\n  return (\n    <>\n      <Scrollbar\n        scrollableNodeProps={{\n          ref: scrollRef,\n        }}\n        sx={{ p: 3, height: 1 }}\n      >\n        {conversation.messages.map((message) => (\n          <ChatMessageItem\n            key={message.id}\n            message={message}\n            conversation={conversation}\n            onOpenLightbox={() => handleOpenLightbox(message.body)}\n          />\n        ))}\n      </Scrollbar>\n\n      <Lightbox\n        index={selectedImage}\n        slides={imagesLightbox}\n        open={selectedImage >= 0}\n        close={handleCloseLightbox}\n      />\n    </>\n  );\n}\n","// @mui\nimport { Stack, Box, Link, Typography, IconButton } from '@mui/material';\n// utils\nimport { fToNow } from '../../../../utils/formatTime';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\nimport BadgeStatus from '../../../../components/badge-status';\nimport { CustomAvatar, CustomAvatarGroup } from '../../../../components/custom-avatar';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  participants: IChatParticipant[];\n};\n\nexport default function ChatHeaderDetail({ participants }: Props) {\n  const isGroup = participants.length > 1;\n\n  const participantInfo = participants.length ? participants[0] : null;\n\n  return (\n    <Stack\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{\n        p: (theme) => theme.spacing(2, 1, 2, 2),\n      }}\n    >\n      {isGroup ? (\n        <Stack flexGrow={1}>\n          <CustomAvatarGroup max={3}>\n            {participants.map((participant) => (\n              <CustomAvatar key={participant.id} alt={participant.name} src={participant.avatar} />\n            ))}\n          </CustomAvatarGroup>\n\n          <Link\n            variant=\"body2\"\n            sx={{\n              mt: 0.5,\n              alignItems: 'center',\n              display: 'inline-flex',\n              color: 'text.secondary',\n            }}\n          >\n            {participants.length} persons\n            <Iconify icon=\"eva:arrow-ios-forward-fill\" width={16} />\n          </Link>\n        </Stack>\n      ) : (\n        <Stack flexGrow={1} direction=\"row\" alignItems=\"center\" spacing={2}>\n          <CustomAvatar\n            src={participantInfo?.avatar}\n            alt={participantInfo?.name}\n            BadgeProps={{\n              badgeContent: <BadgeStatus status={participantInfo?.status} />,\n            }}\n          />\n\n          <div>\n            <Typography variant=\"subtitle2\">{participantInfo?.name}</Typography>\n\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              {participantInfo?.status === 'offline' ? (\n                participantInfo?.lastActivity && fToNow(participantInfo?.lastActivity)\n              ) : (\n                <Box component=\"span\" sx={{ textTransform: 'capitalize' }}>\n                  {participantInfo?.status}\n                </Box>\n              )}\n            </Typography>\n          </div>\n        </Stack>\n      )}\n\n      <IconButton>\n        <Iconify icon=\"eva:phone-fill\" />\n      </IconButton>\n\n      <IconButton>\n        <Iconify icon=\"eva:video-fill\" />\n      </IconButton>\n\n      <IconButton>\n        <Iconify icon=\"eva:more-vertical-fill\" />\n      </IconButton>\n    </Stack>\n  );\n}\n","import { useState } from 'react';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport {\n  Box,\n  Chip,\n  Stack,\n  Avatar,\n  TextField,\n  Typography,\n  StackProps,\n  Autocomplete,\n} from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\nimport SearchNotFound from '../../../../components/search-not-found';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends StackProps {\n  contacts: IChatParticipant[];\n  recipients: IChatParticipant[];\n  onAddRecipients: (data: IChatParticipant[]) => void;\n}\n\nexport default function ChatHeaderCompose({\n  contacts,\n  recipients,\n  onAddRecipients,\n  sx,\n  ...other\n}: Props) {\n  const [searchRecipients, setSearchRecipients] = useState('');\n\n  const handleAddRecipients = (selectedRecipients: IChatParticipant[]) => {\n    setSearchRecipients('');\n    onAddRecipients(selectedRecipients);\n  };\n\n  return (\n    <Stack\n      spacing={1}\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{\n        py: 2,\n        px: 2.5,\n        ...sx,\n      }}\n      {...other}\n    >\n      <Typography variant=\"subtitle2\" sx={{ color: 'text.secondary' }}>\n        To:\n      </Typography>\n\n      <Autocomplete\n        sx={{ minWidth: 240 }}\n        multiple\n        popupIcon={null}\n        noOptionsText={<SearchNotFound query={searchRecipients} />}\n        onChange={(event, value) => handleAddRecipients(value)}\n        onInputChange={(event, value) => setSearchRecipients(value)}\n        options={contacts}\n        getOptionLabel={(recipient) => recipient.name}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            size=\"small\"\n            placeholder={recipients.length ? '+Recipients' : ''}\n          />\n        )}\n        renderOption={(props, recipient, { inputValue, selected }) => {\n          const { name, avatar } = recipient;\n          const matches = match(name, inputValue);\n          const parts = parse(name, matches);\n\n          return (\n            <Box\n              component=\"li\"\n              sx={{\n                p: '12px !important',\n              }}\n              {...props}\n            >\n              <Box\n                sx={{\n                  mr: 1.5,\n                  width: 32,\n                  height: 32,\n                  overflow: 'hidden',\n                  borderRadius: '50%',\n                  position: 'relative',\n                }}\n              >\n                <Avatar alt={name} src={avatar} />\n                <Box\n                  sx={{\n                    top: 0,\n                    opacity: 0,\n                    width: '100%',\n                    height: '100%',\n                    display: 'flex',\n                    position: 'absolute',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\n                    transition: (theme) =>\n                      theme.transitions.create('opacity', {\n                        easing: theme.transitions.easing.easeInOut,\n                        duration: theme.transitions.duration.shorter,\n                      }),\n                    ...(selected && {\n                      opacity: 1,\n                      color: 'primary.main',\n                    }),\n                  }}\n                >\n                  <Iconify icon=\"eva:checkmark-fill\" />\n                </Box>\n              </Box>\n\n              {parts.map((part, index) => (\n                <Typography\n                  key={index}\n                  variant=\"subtitle2\"\n                  color={part.highlight ? 'primary' : 'textPrimary'}\n                >\n                  {part.text}\n                </Typography>\n              ))}\n            </Box>\n          );\n        }}\n        renderTags={(selectedRecipients, getTagProps) =>\n          selectedRecipients.map((recipient, index) => (\n            <Chip\n              {...getTagProps({ index })}\n              key={recipient.id}\n              size=\"small\"\n              label={recipient.name}\n              avatar={<Avatar alt={recipient.name} src={recipient.avatar} />}\n            />\n          ))\n        }\n      />\n    </Stack>\n  );\n}\n","import { useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\n// @mui\nimport { Card, Container, Stack } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport {\n  getContacts,\n  getConversation,\n  getParticipants,\n  getConversations,\n  addRecipients,\n  sendMessage,\n  markConversationAsRead,\n  resetActiveConversation,\n} from '../../../redux/slices/chat';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// components\nimport { useSettingsContext } from '../../../components/settings';\nimport CustomBreadcrumbs from '../../../components/custom-breadcrumbs';\n// @types\nimport { IChatParticipant, IChatSendMessage } from '../../../@types/chat';\n// sections\nimport ChatNav from './nav/ChatNav';\nimport ChatRoom from './room/ChatRoom';\nimport ChatMessageInput from './message/ChatMessageInput';\nimport ChatMessageList from './message/ChatMessageList';\nimport ChatHeaderDetail from './header/ChatHeaderDetail';\nimport ChatHeaderCompose from './header/ChatHeaderCompose';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\nexport default function Chat() {\n  const { themeStretch } = useSettingsContext();\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const { pathname } = useLocation();\n\n  const { conversationKey = '' } = useParams();\n\n  const { contacts, recipients, participants, activeConversationId, conversations } = useSelector(\n    (state) => state.chat\n  );\n\n  const selectedConversation = useSelector(() => {\n    if (activeConversationId) {\n      return conversations.byId[activeConversationId];\n    }\n\n    return {\n      id: '',\n      messages: [],\n      participants: [],\n      unreadCount: 0,\n      type: '',\n    };\n  });\n\n  const detailView = !!conversationKey;\n\n  const displayParticipants = participants.filter((item) => item.id !== CURRENT_USER_ID);\n\n  useEffect(() => {\n    dispatch(getConversations());\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(`${conversationKey}`));\n      try {\n        await dispatch(getConversation(`${conversationKey}`));\n      } catch (error) {\n        console.error(error);\n        navigate(PATH_DASHBOARD.chat.new);\n      }\n    };\n\n    if (conversationKey) {\n      getDetails();\n    } else if (activeConversationId) {\n      dispatch(resetActiveConversation());\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [conversationKey]);\n\n  useEffect(() => {\n    if (activeConversationId) {\n      dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  const handleAddRecipients = (selectedRecipients: IChatParticipant[]) => {\n    dispatch(addRecipients(selectedRecipients));\n  };\n\n  const handleSendMessage = async (value: IChatSendMessage) => {\n    try {\n      dispatch(sendMessage(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Container maxWidth={themeStretch ? false : 'xl'}>\n      <CustomBreadcrumbs\n        heading=\"Chat\"\n        links={[\n          {\n            name: 'Dashboard',\n            href: PATH_DASHBOARD.root,\n          },\n          { name: 'Chat' },\n        ]}\n      />\n\n      <Card sx={{ height: '72vh', display: 'flex' }}>\n        <ChatNav conversations={conversations} activeConversationId={activeConversationId} />\n\n        <Stack flexGrow={1}>\n          {detailView ? (\n            <ChatHeaderDetail participants={displayParticipants} />\n          ) : (\n            <ChatHeaderCompose\n              recipients={recipients}\n              contacts={Object.values(contacts.byId)}\n              onAddRecipients={handleAddRecipients}\n            />\n          )}\n\n          <Stack\n            direction=\"row\"\n            flexGrow={1}\n            sx={{\n              overflow: 'hidden',\n              borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\n            }}\n          >\n            <Stack flexGrow={1}>\n              <ChatMessageList conversation={selectedConversation} />\n\n              <ChatMessageInput\n                conversationId={activeConversationId}\n                onSend={handleSendMessage}\n                disabled={\n                  pathname === PATH_DASHBOARD.chat.root || pathname === PATH_DASHBOARD.chat.new\n                }\n              />\n            </Stack>\n\n            {detailView && (\n              <ChatRoom conversation={selectedConversation} participants={displayParticipants} />\n            )}\n          </Stack>\n        </Stack>\n      </Card>\n    </Container>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport { Chat } from '../../sections/@dashboard/chat';\n\n// ----------------------------------------------------------------------\n\nexport default function ChatPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Chat | NotPump</title>\n      </Helmet>\n\n      <Chat />\n    </>\n  );\n}\n"],"names":["StyledBadgeStatus","styled","theme","ownerState","status","size","width","height","display","borderRadius","alignItems","justifyContent","content","backgroundColor","palette","common","white","warning","main","transform","error","success","text","disabled","info","BadgeStatus","sx","useTheme","props","TextField","select","SelectProps","native","typography","subtitle2","padding","spacing","paddingRight","Number","shape","alpha","grey","shouldForwardProp","prop","border","transition","transitions","create","duration","shorter","boxShadow","customShadows","z20","breakpoints","up","forwardRef","ref","quantity","onIncrease","onDecrease","disabledIncrease","disabledDecrease","other","Stack","flexShrink","direction","mb","py","px","IconButton","color","onClick","icon","ChatNavItem","conversation","openNav","isSelected","onSelect","details","getDetails","lastActivity","messages","length","createdAt","isGroup","otherParticipants","isUnread","unreadCount","hasOnlineInGroup","map","item","includes","ListItemButton","disableGutters","bgcolor","ListItemAvatar","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","compact","slice","participant","alt","name","src","avatar","id","BadgeProps","ListItemText","primary","displayNames","primaryTypographyProps","noWrap","variant","secondary","displayText","secondaryTypographyProps","ml","Typography","component","fontSize","formatDistanceToNowStrict","Date","addSuffix","currentUserId","participants","filter","join","lastMessage","sender","senderId","message","contentType","body","ChatNavList","conversations","onCloseNav","selected","navigate","useNavigate","isDesktop","useResponsive","loading","allIds","List","disablePadding","Array","conversationId","index","byId","conversationKey","type","otherParticipant","find","username","PATH_DASHBOARD","handleSelectConversation","ChatNavSearch","value","onChange","onClickAway","ClickAwayListener","fullWidth","placeholder","InputProps","startAdornment","InputAdornment","position","mt","STATUS","ChatNavAccount","user","useAuthContext","useState","setStatus","openPopover","setOpenPopover","photoURL","displayName","event","currentTarget","cursor","open","onClose","arrow","p","pr","pl","email","Tooltip","title","Divider","MenuItem","m","Select","target","textTransform","right","top","option","ChatNavSearchResults","searchContacts","searchResults","onSelectContact","isNotFound","paragraph","query","mx","result","Avatar","mr","StyledToggleButton","disableRipple","left","zIndex","contrastText","darker","ChatNav","activeConversationId","setOpenNav","setSearchResults","setSearchContacts","isCollapse","useEffect","handleOpenNav","handleCloseNav","handleToggleNav","handleChangeSearch","axios","params","response","data","results","console","renderContent","Box","flexGrow","RouterLink","to","Drawer","PaperProps","pb","visibility","ModalProps","keepMounted","ChatRoomCollapseButton","onCollapse","children","Button","endIcon","ChatRoomAttachments","totalAttachments","uniq","flatten","attachments","overflow","borderTop","divider","borderBottom","attachment","AttachmentItem","imageView","file","preview","onDownload","log","minWidth","fDateTime","dateCreated","ChatRoomSingle","role","Collapse","in","address","phone","row","ChatRoomParticipantInfoDialog","Dialog","maxWidth","DialogContent","pt","ChatRoomGroup","selectUserId","onOpenUserInfo","HEIGHT","Participant","onOpen","z8","background","paper","borderRight","neutral","ChatRoom","openInfo","setOpenInfo","openAttachments","setOpenAttachments","openParticipants","setOpenParticipants","selectUser","setSelectUser","participantId","anchor","ChatMessageInput","onSend","fileInputRef","useRef","setMessage","handleClickAttach","current","click","InputBase","onKeyUp","key","messageId","uuidv4","endAdornment","style","ChatMessageItem","onOpenLightbox","senderDetails","currentUser","isImage","firstName","split","opacity","ChatMessageList","scrollRef","selectedImage","setSelectedImage","scrollTop","scrollHeight","imagesLightbox","scrollableNodeProps","imageUrl","imageIndex","findIndex","image","handleOpenLightbox","slides","close","ChatHeaderDetail","participantInfo","max","Link","fToNow","ChatHeaderCompose","contacts","recipients","onAddRecipients","searchRecipients","setSearchRecipients","Autocomplete","multiple","popupIcon","noOptionsText","selectedRecipients","onInputChange","options","getOptionLabel","recipient","renderInput","renderOption","inputValue","matches","match","parts","parse","easing","easeInOut","part","highlight","renderTags","getTagProps","Chip","label","Chat","themeStretch","useSettingsContext","dispatch","useDispatch","pathname","useLocation","useParams","useSelector","state","chat","selectedConversation","detailView","displayParticipants","getConversations","getContacts","getParticipants","getConversation","resetActiveConversation","markConversationAsRead","handleSendMessage","sendMessage","Container","heading","links","href","Card","Object","values","addRecipients","ChatPage"],"sourceRoot":""}